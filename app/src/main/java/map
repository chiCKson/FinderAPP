package com.keliya.chickson.finder

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.location.Criteria
import android.location.Location
import android.location.LocationManager
import android.os.Bundle
import android.support.v4.app.FragmentActivity
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.BitmapDescriptor
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions


class MapsActivity : FragmentActivity(), OnMapReadyCallback  {




    private var mMap: GoogleMap? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_maps)
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        val mapFragment = supportFragmentManager
                .findFragmentById(R.id.map) as SupportMapFragment
        mapFragment.getMapAsync(this)
    }

    companion object{
        fun mapIntent(context: Context): Intent {
            val intent= Intent(context,MapsActivity::class.java)
            return intent
        }
    }
    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @SuppressLint("MissingPermission")
    override fun onMapReady(googleMap: GoogleMap) {
        mMap = googleMap


        // Enable MyLocation Layer of Google Map
        mMap!!.isMyLocationEnabled=true
        val myLoc:Location=mMap!!.myLocation
        // Get LocationManager object from System Service LOCATION_SERVICE

        val latitude:Double=myLoc.latitude
        // Get latitude of the current location


        // Get longitude of the current location
        val longitude:Double= myLoc.longitude

        // Create a LatLng object for the current location
        val latLng = LatLng(latitude, longitude)

        // Show the current location in Google Map
        mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))

        // Zoom in the Google Map
        mMap!!.animateCamera(CameraUpdateFactory.zoomTo(14f))
        mMap!!.addMarker(MarkerOptions().position(LatLng(latitude, longitude)).title("You are here!").snippet("Consider yourself located").icon(BitmapDescriptorFactory.fromResource(R.mipmap.ic_launcher_round)))
    }


